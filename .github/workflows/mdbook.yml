# Workflow for building and deploying a mdBook site to GitHub Pages
#
# To get started with mdBook see: https://rust-lang.github.io/mdBook/index.html
#
name: Deploy mdBook site to Pages

on:
  # Runs on pushes targeting the default branch only if the book files are modified
  push:
    branches: ["main"]
    paths:
      - 'src/**'
      - 'book.toml'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    steps:
      # Check out the repository
      - uses: actions/checkout@v4
      # Fetch the latest mdBook version
      - name: Fetch latest mdBook version
        id: get-mdbook-version
        run: |
          tag=$(curl -s 'https://api.github.com/repos/rust-lang/mdbook/releases/latest' | jq -r '.tag_name')
          echo "MDBOOK_VERSION=${tag}"
          echo "MDBOOK_VERSION=${tag}" >> $GITHUB_ENV
      # Cache the mdBook binary
      - name: Cache mdBook
        id: cache
        uses: actions/cache@v4
        with:
          path: mdbook  # Directory where mdBook binary is stored
          key: mdbook-${{ env.MDBOOK_VERSION }}  # Cache key based on the version tag
          restore-keys: mdbook-${{ env.MDBOOK_VERSION }}  # Restore cache based on the version tag
      # Install mdBook using Rust's package manager
      - name: Install mdBook if not cached
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          url="https://github.com/rust-lang/mdbook/releases/download/${{ env.MDBOOK_VERSION }}/mdbook-${{ env.MDBOOK_VERSION }}-x86_64-unknown-linux-gnu.tar.gz"
          mkdir -p bin
          curl -sSL $url | tar -xz --directory=./bin
      # Build the book
      - name: Build Book
        run: |
          ./bin/mdbook build
      # Setup GitHub Pages
      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v5
      # Upload the built book as an artifact
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./book

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
